[{"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\index.js":"1","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\serviceWorker.js":"2","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\App.js":"3","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Detection.js":"4","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollection.js":"5","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Risk.js":"6","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysis.js":"7","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluation.js":"8","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Progression.js":"9","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Preprocessing.js":"10","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\MyNavbar.js":"11","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\LandCoverDataCollection.js":"12","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\SatelliteDataCollection.js":"13","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\FireHistoryDataCollection.js":"14","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\WeatherDataCollection.js":"15","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\LandCoverDataAnalysis.js":"16","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\SatelliteDataAnalysis.js":"17","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\WeatherDataAnalysis.js":"18","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\FireHistoryDataAnalysis.js":"19","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluationComponents\\FireDetectionModEval.js":"20","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluationComponents\\FireRiskPredictionModEval.js":"21","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluationComponents\\FireProgressionModEval.js":"22","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\FilterDiv.js":"23","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\CountySelector.js":"24","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\FilterDivModEval.js":"25"},{"size":524,"mtime":1607318798817,"results":"26","hashOfConfig":"27"},{"size":5227,"mtime":1607318798818,"results":"28","hashOfConfig":"27"},{"size":1084,"mtime":1607318798804,"results":"29","hashOfConfig":"27"},{"size":16422,"mtime":1607380594901,"results":"30","hashOfConfig":"27"},{"size":6611,"mtime":1607318798808,"results":"31","hashOfConfig":"27"},{"size":8608,"mtime":1607318798812,"results":"32","hashOfConfig":"27"},{"size":6638,"mtime":1607318798806,"results":"33","hashOfConfig":"27"},{"size":5934,"mtime":1607318798810,"results":"34","hashOfConfig":"27"},{"size":12454,"mtime":1607318798812,"results":"35","hashOfConfig":"27"},{"size":941,"mtime":1607318798812,"results":"36","hashOfConfig":"27"},{"size":4395,"mtime":1607318798806,"results":"37","hashOfConfig":"27"},{"size":9639,"mtime":1607318798809,"results":"38","hashOfConfig":"27"},{"size":13672,"mtime":1607318798809,"results":"39","hashOfConfig":"27"},{"size":12588,"mtime":1607318798808,"results":"40","hashOfConfig":"27"},{"size":17760,"mtime":1607318798809,"results":"41","hashOfConfig":"27"},{"size":14123,"mtime":1607318798807,"results":"42","hashOfConfig":"27"},{"size":14170,"mtime":1607318798807,"results":"43","hashOfConfig":"27"},{"size":13935,"mtime":1607318798808,"results":"44","hashOfConfig":"27"},{"size":14026,"mtime":1607318798807,"results":"45","hashOfConfig":"27"},{"size":14030,"mtime":1607318798811,"results":"46","hashOfConfig":"27"},{"size":16854,"mtime":1607318798811,"results":"47","hashOfConfig":"27"},{"size":14373,"mtime":1607318798811,"results":"48","hashOfConfig":"27"},{"size":6094,"mtime":1607318798805,"results":"49","hashOfConfig":"27"},{"size":3974,"mtime":1607318798805,"results":"50","hashOfConfig":"27"},{"size":6180,"mtime":1607318798806,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1d9yf5j",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"54"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"54"},"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\index.js",[],["120","121"],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\serviceWorker.js",[],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\App.js",[],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Detection.js",["122","123","124"],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollection.js",[],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Risk.js",["125"],"import React from 'react';\r\nimport {Map, GeoJSON, TileLayer, LayersControl, FeatureGroup} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport counties from './counties.json';\r\nimport MyNavbar from './Components/MyNavbar';\r\n\r\nclass Risk extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentCounty: null,\r\n        }\r\n\r\n        this.onCountyClick = this.onCountyClick.bind(this);\r\n        this.onEachCounty = this.onEachCounty.bind(this);\r\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\r\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\r\n    }\r\n\r\n    onCountyClick(event){\r\n        console.log(event.target.feature.properties.name + ' clicked.');\r\n        this.setState({\r\n            currentCounty: event.target.feature.properties.name,\r\n        })\r\n    }\r\n\r\n    onCountyMouseover(event){\r\n        event.target.setStyle({\r\n            fillOpacity: 0.9,\r\n        });\r\n    }\r\n\r\n    onCountyMouseout(event){\r\n        event.target.setStyle({\r\n            fillOpacity: 0.3,\r\n        });\r\n    }\r\n\r\n    onEachCounty(county, layer){\r\n        // var countyName = county.properties.name;\r\n        // console.log(county.properties.name);\r\n\r\n        // layer.bindPopup(countyName);\r\n\r\n        layer.on({\r\n            click: this.onCountyClick,\r\n            mouseover: this.onCountyMouseover,\r\n            mouseout: this.onCountyMouseout,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        var position = [37.334665328, -121.875329832];\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        const fireIcon = require('leaflet');\r\n        delete fireIcon.Icon.Default.prototype._getIconUrl;\r\n        fireIcon.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require(\"./images/fire.png\"),\r\n            iconUrl: require(\"./images/fire.png\"),\r\n            shadowUrl: require(\"leaflet/dist/images/marker-shadow.png\")\r\n        });\r\n\r\n        return(\r\n            <div>\r\n                <MyNavbar/>\r\n\r\n                <div style={{marginLeft:'15rem'}}>\r\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\r\n                        <h1 className='mt-2'>Fire Risk Prediction</h1>\r\n                    </div>\r\n\r\n                    <div style={{wdith:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\r\n                        <div style={{width:\"100%\"}}>\r\n\r\n                            <Map style={{height:'calc(100vh - 72px)', width:'calc(100vw - 500px)', float:'left'}} zoom={8} center={position}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\">\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                    {/* <LayersControl.Overlay name=\"Show Markers\">\r\n                                        <FeatureGroup>\r\n                                            {\r\n                                                randomLocations.map(location => (\r\n                                                    <Marker position={location}>\r\n                                                        <Popup>\r\n                                                            <h6>\r\n                                                            Latitude: {location[0]}\r\n                                                            <br/>\r\n                                                            Longitude: {location[1]}\r\n                                                            </h6>\r\n                                                        </Popup>\r\n                                                    </Marker>\r\n                                                ))\r\n                                            }\r\n                                        </FeatureGroup>\r\n                                    </LayersControl.Overlay> */}\r\n                                </LayersControl>\r\n\r\n                            </Map>\r\n\r\n                            <div style={{width:'260px', float:'right', borderLeft:'1px solid #d9dadb'}}>\r\n                                <div style={{marginTop:'16px'}}>\r\n                                    <form onSubmit={this.handleCitySearch}>\r\n                                        <div className=\"col-lg-10 mb-3\">\r\n                                            <div className=\"input-group\" style={{width:'226px'}}>\r\n                                                <input type=\"text\" className=\"form-control rounded-0\" id=\"citySearchInput\" placeholder=\"City Name\" required />\r\n                                                <div className=\"input-group-prepend\">\r\n                                                    <input type=\"submit\" value=\"Search\" className=\"btn btn-primary btn-sm rounded-0\" id=\"inputGroupPrepend2\" style={{backgroundColor:'#1580fb'}}/>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </form>\r\n                                </div>\r\n                                <hr style={{margin:'16px'}}/>\r\n\r\n                                <div style={{height:'100%', overflow:'auto', margin:'16px'}}>\r\n                                    <h4>Select date:</h4>\r\n                                    <div >\r\n                                        <input type='date' className='input-group' style={{padding:'10px'}}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Risk;","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysis.js",["126"],"import React from 'react';\r\nimport MyNavbar from './Components/MyNavbar';\r\n\r\nimport WeatherDataAnalysis from './DataAnalysisComponents/WeatherDataAnalysis';\r\nimport FireHistoryDataAnalysis from './DataAnalysisComponents/FireHistoryDataAnalysis';\r\nimport LandCoverDataAnalysis from './DataAnalysisComponents/LandCoverDataAnalysis';\r\nimport SatelliteDataAnalysis from './DataAnalysisComponents/SatelliteDataAnalysis';\r\n\r\nclass DataAnalysis extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            lat: 37.334665328,\r\n            lon: -121.875329832,\r\n            currentMode: 'Weather',\r\n            weatherComponent: null,\r\n            satelliteComponent: null,\r\n            fireHistoryComponent: null,\r\n            landCoverComponent: null,\r\n        }\r\n\r\n        this.getCoordinates = this.getCoordinates.bind(this);\r\n        this.handleModeChange = this.handleModeChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\r\n        }\r\n        else{\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n        this.setState({\r\n            weatherComponent: <WeatherDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\r\n            fireHistoryComponent: <FireHistoryDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\r\n            landCoverComponent: <LandCoverDataAnalysis lat={this.state.lat} lon={this.state.lon} />,\r\n            satelliteComponent: <SatelliteDataAnalysis lat={this.state.lat} lon={this.state.lon} />\r\n        })\r\n    }\r\n\r\n    getCoordinates(position){\r\n        this.setState({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n        })\r\n    }\r\n\r\n    handleModeChange(event){\r\n        this.setState({\r\n            currentMode: event.target.innerHTML\r\n        });\r\n    }\r\n\r\n    render(){\r\n        var position = [37.334665328, -121.875329832];\r\n\r\n        var styles = {\r\n            buttonGroupButton: {\r\n                width: '20%',\r\n                backgroundColor: '#f0f0f0', \r\n                border: '1px solid grey',\r\n                padding: '10px 24px', \r\n                float: 'left',\r\n                margin:'0 20px 0 0',\r\n                borderRadius: '20px',\r\n                color:'black',\r\n                outline:'none',\r\n                height:'46px'\r\n            },\r\n            buttonGroupButtonActive: {\r\n                width: '20%',\r\n                backgroundColor: '#1580fb', \r\n                border: '1px solid #1580fb',\r\n                color: 'white', \r\n                padding: '10px 24px', \r\n                float: 'left',\r\n                margin:'0 20px 0 0',\r\n                borderRadius:'20px',\r\n                outline:'none',\r\n                height:'46px'\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <MyNavbar/>\r\n\r\n                <div style={{marginLeft:'15rem'}}>\r\n\r\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\r\n                        <h1 className='mt-2'>Data Analysis</h1>\r\n                    </div>\r\n\r\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\r\n\r\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\r\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\r\n                                {\r\n                                    this.state.currentMode === 'Weather'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Weather</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Weather</button>\r\n                                }\r\n                                {\r\n                                    this.state.currentMode === 'Fire History'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Fire History</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire History</button>\r\n                                }\r\n                                {\r\n                                    this.state.currentMode === 'Land Cover'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Land Cover</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Land Cover</button>\r\n                                }\r\n                                {\r\n                                    this.state.currentMode === 'Satellite'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Satellite</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Satellite</button>\r\n                                }\r\n                            </div>\r\n\r\n                            {\r\n                                this.state.currentMode === 'Weather'?\r\n                                this.state.weatherComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                            {\r\n                                this.state.currentMode === 'Satellite'?\r\n                                this.state.satelliteComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                            {\r\n                                this.state.currentMode === 'Fire History'?\r\n                                this.state.fireHistoryComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                            {\r\n                                this.state.currentMode === 'Land Cover'?\r\n                                this.state.landCoverComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataAnalysis;","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluation.js",["127"],"import React from 'react';\r\nimport MyNavbar from './Components/MyNavbar';\r\n\r\n//import FireDetectionModEval  from './ModelEvaluationComponents/FireDetectionModEval';\r\nimport FireDetectionModEval from './ModelEvaluationComponents/FireDetectionModEval';\r\nimport FireRiskPredictionModEval from './ModelEvaluationComponents/FireRiskPredictionModEval';\r\nimport FireProgressionModEval from './ModelEvaluationComponents/FireProgressionModEval';\r\n\r\n\r\nclass ModelEvaluation extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            lat: 37.334665328,\r\n            lon: -121.875329832,\r\n            currentMode: 'Fire Detection',\r\n            weatherComponent: null,\r\n            satelliteComponent: null,\r\n            fireHistoryComponent: null,\r\n        }\r\n\r\n        this.getCoordinates = this.getCoordinates.bind(this);\r\n        this.handleModeChange = this.handleModeChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(this.getCoordinates);\r\n        }\r\n        else{\r\n            alert(\"Geolocation is not supported by this browser.\");\r\n        }\r\n        this.setState({\r\n            weatherComponent: <FireDetectionModEval lat={this.state.lat} lon={this.state.lon} />,\r\n            fireHistoryComponent: <FireRiskPredictionModEval lat={this.state.lat} lon={this.state.lon} />,\r\n            satelliteComponent: <FireProgressionModEval lat={this.state.lat} lon={this.state.lon} />\r\n        })\r\n    }\r\n\r\n    getCoordinates(position){\r\n        this.setState({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude\r\n        })\r\n    }\r\n\r\n    handleModeChange(event){\r\n        this.setState({\r\n            currentMode: event.target.innerHTML\r\n        });\r\n    }\r\n\r\n    render(){\r\n        var position = [37.334665328, -121.875329832];\r\n\r\n        var styles = {\r\n            buttonGroupButton: {\r\n                width: '30%',\r\n                backgroundColor: '#f0f0f0', \r\n                border: '1px solid grey',\r\n                padding: '10px 24px', \r\n                float: 'left',\r\n                margin:'0 20px 0 0',\r\n                borderRadius: '20px',\r\n                color:'black',\r\n                outline:'none',\r\n                height:'46px'\r\n            },\r\n            buttonGroupButtonActive: {\r\n                width: '30%',\r\n                backgroundColor: '#1580fb', \r\n                border: '1px solid #1580fb',\r\n                color: 'white', \r\n                padding: '10px 24px', \r\n                float: 'left',\r\n                margin:'0 20px 0 0',\r\n                borderRadius:'20px',\r\n                outline:'none',\r\n                height:'46px'\r\n            }\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <MyNavbar/>\r\n\r\n                <div style={{marginLeft:'15rem'}}>\r\n\r\n                    <div style={{position:'fixed', backgroundColor:'#f8f9fa', height:\"72px\", width:\"100%\",  borderLeft:'1px solid #d9dadb', borderBottom:\"1px solid #d9dadb\", paddingLeft:\"20px\"}}>\r\n                        <h1 className='mt-2'>Model Evaluation</h1>\r\n                    </div>\r\n\r\n                    <div style={{width:'60vw', position:'absolute', marginTop:'72px', zIndex:'-100'}}>\r\n\r\n                        <div style={{margin:'20px 0 0 20px', width:'calc(100vw - 280px)'}}>\r\n                            <div className=\"btn-group\" style={{width:\"100%\", display:'flex', justifyContent:'center', flexWrap:'wrap'}}>\r\n                                {\r\n                                    this.state.currentMode === 'Fire Detection'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Fire Detection</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Detection</button>\r\n                                }\r\n                                {\r\n                                    this.state.currentMode === 'Fire Risk Prediction'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Fire Risk Prediction</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Risk Prediction</button>\r\n                                }\r\n                                {\r\n                                    this.state.currentMode === 'Fire Progression'?\r\n                                    <button style={styles.buttonGroupButtonActive}>Fire Progression</button>\r\n                                    :\r\n                                    <button style={styles.buttonGroupButton} onClick={this.handleModeChange}>Fire Progression</button>\r\n                                }\r\n                            </div>\r\n\r\n                            {\r\n                                this.state.currentMode === 'Fire Detection'?\r\n                                this.state.weatherComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                            {\r\n                                this.state.currentMode === 'Fire Progression'?\r\n                                this.state.satelliteComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                            {\r\n                                this.state.currentMode === 'Fire Risk Prediction'?\r\n                                this.state.fireHistoryComponent\r\n                                :\r\n                                <div></div>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ModelEvaluation;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Progression.js",[],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Preprocessing.js",[],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\MyNavbar.js",["128","129"],"import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport '../css/MyNavbar.css';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass MyNavbar extends React.Component{\r\n    render(){        \r\n        var url = window.location.href;\r\n\r\n        return(\r\n            <div className=\"d-flex\" id=\"wrapper\">\r\n            <div className=\"bg-light border-right\" id=\"sidebar-wrapper\">\r\n                <div className=\"sidebar-heading\">\r\n                    <img src='https://upload.wikimedia.org/wikipedia/en/thumb/e/ec/San_Jose_State_Spartans_logo.svg/1200px-San_Jose_State_Spartans_logo.svg.png' alt='SJSU' width='40px' style={{margin:\"0 16px 0 0\"}}></img>\r\n                    SJSU Wildfire \r\n                </div>\r\n                <div className=\"list-group list-group-flush\">\r\n                    {\r\n                        url.substr(url.length - 4).includes('com')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" style={{borderRight:'10px solid #3d3d3d'}} >Data Collection</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/\" >Data Collection</Link>\r\n                    }\r\n                    {\r\n                        url.includes('preprocessing')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\" style={{borderRight:'10px solid #3d3d3d'}}>Preprocessing</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/preprocessing\">Preprocessing</Link>\r\n                    }\r\n                    {\r\n                        url.includes('analysis')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" style={{borderRight:'10px solid #3d3d3d'}} >Data Analysis</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/data-analysis\" >Data Analysis</Link>\r\n                    }\r\n                    {\r\n                        url.includes('detection')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\" style={{borderRight:'10px solid #3d3d3d'}}>Fire Detection</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/detection\">Fire Detection</Link>\r\n                    }\r\n                    {\r\n                        url.includes('progression')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\" style={{borderRight:'10px solid #3d3d3d'}}>Fire Progression</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/progression\">Fire Progression</Link>\r\n                    }\r\n                    {\r\n                        url.includes('risk')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\" style={{borderRight:'10px solid #3d3d3d'}}>Fire Risk Prediction</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/risk\">Fire Risk Prediction</Link>\r\n                    }\r\n                    {\r\n                        url.includes('evaluation')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" style={{borderRight:'10px solid #3d3d3d'}}>Model Evaluation</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/model-evaluation\" >Model Evaluation</Link>\r\n                    }\r\n                    {/* {\r\n                        url.includes('flask')?\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" style={{borderRight:'10px solid #3d3d3d'}}>Flask examples</Link>\r\n                        :\r\n                        <Link className='list-group-item list-group-item-action bg-light' to=\"/flask\" >Flask examples</Link>\r\n                    } */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default MyNavbar;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\LandCoverDataCollection.js",["130","131","132","133"],"import React from 'react';\r\nimport CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport FilterDiv from '../Components/FilterDiv'\r\n\r\nclass LandCoverDataCollection extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USGS',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            currentCounty: 'Alameda',\r\n            data: null,\r\n            currentView: 'Table View',\r\n            currentMarker: null,\r\n        }\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSGSdata = this.getUSGSdata.bind(this);\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.getUSGSdata(monthAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USGS'){\r\n            this.getUSGSdata(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSGSdata(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n                <FilterDiv\r\n                    pageType='dataCollection' \r\n                    dataType='landCover'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                />\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Table View'?\r\n                        <div>\r\n                            {\r\n                                !this.state.data?\r\n                                <div>API not implemented yet</div>\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                </LayersControl>\r\n\r\n                                <MarkerClusterGroup>\r\n                                    {\r\n                                        this.state.data == null?\r\n                                        <div>Waiting for data to load...</div>\r\n                                        :\r\n                                        <div></div>\r\n                                    }\r\n                                </MarkerClusterGroup>\r\n                            </Map>\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.currentMarker == null?\r\n                                <h3>Select a marker for more info.</h3>\r\n                                :\r\n                                <div>\r\n                                    <h3>Marker Information</h3>\r\n                                    <hr/>\r\n                                    {\r\n                                        this.state.features.map(\r\n                                            feature => {\r\n                                                return (\r\n                                                <div>\r\n                                                    <strong>{feature}: </strong>{this.state.currentMarker[feature]}\r\n                                                    <br/>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandCoverDataCollection;","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\SatelliteDataCollection.js",["134","135","136","137","138"],"import React from 'react';\r\nimport CountySelector from '../Components/CountySelector';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport FilterDiv from '../Components/FilterDiv';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass SatelliteDataCollection extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USGS',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            currentCounty: 'Alameda',\r\n            data: null,\r\n            currentView: 'Table View',\r\n            currentMarker: null,\r\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\r\n        }\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSGSdata = this.getUSGSdata.bind(this);\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.handleMarkerChange = this.handleMarkerChange.bind(this);\r\n\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.getUSGSdata(monthAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USGS'){\r\n            this.getUSGSdata(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    getUSGSdata(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        fetch(prodUrl + '/api/getEarthExplorerData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                lat: lat,\r\n                lon: lon,\r\n                startDate: start,\r\n                endDate: end,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var scenes = resData['scenes'];\r\n\r\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n\r\n            for(const col of this.state.features){\r\n                var newColEntry = {\r\n                    label: col,\r\n                    field: col,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            for(var currentScene in scenes){\r\n                var newRowEntry = {}\r\n                for(var col of this.state.features){\r\n                    var val = scenes[currentScene][col];\r\n                    if(val == null){\r\n                        if(col == 'latitude'){\r\n                            val = lat\r\n                        }\r\n                        else if(col == 'longitude'){\r\n                            val = lon\r\n                        }\r\n                        else{\r\n                            val = ''\r\n                        }\r\n                    }\r\n                    // if(val == null){\r\n                    //     val = ''\r\n                    // }\r\n                    newRowEntry[col] = val\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    handleMarkerChange(newMarker){\r\n        this.setState({\r\n            currentMarker: newMarker,\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n                <FilterDiv \r\n                    pageType='dataCollection'\r\n                    dataType='satellite'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                />\r\n                <div>\r\n                    <div>\r\n                        {\r\n                            this.state.currentView === 'Table View'?\r\n                            <div>\r\n                                {\r\n                                    !this.state.data?\r\n                                    <div>Getting data...</div>\r\n                                    :\r\n                                    <MDBDataTable responsive\r\n                                    striped\r\n                                    bordered\r\n                                    data={this.state.data}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                            :\r\n                            <div>\r\n                                <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n\r\n                                    <LayersControl position=\"topright\">\r\n\r\n                                        <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                            <TileLayer\r\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                            />\r\n                                        </LayersControl.BaseLayer>\r\n\r\n                                        <LayersControl.BaseLayer name=\"Street\">\r\n                                            <TileLayer\r\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                            />\r\n                                        </LayersControl.BaseLayer>\r\n\r\n                                        <LayersControl.BaseLayer name=\"Satellite\">\r\n                                            <TileLayer\r\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                            />\r\n                                        </LayersControl.BaseLayer>\r\n\r\n                                        <LayersControl.BaseLayer name=\"Terrain\">\r\n                                            <TileLayer\r\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                            />\r\n                                        </LayersControl.BaseLayer>\r\n\r\n                                        <LayersControl.BaseLayer name=\"Dark\">\r\n                                            <TileLayer\r\n                                            attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                            url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                            />\r\n                                        </LayersControl.BaseLayer>\r\n\r\n                                    </LayersControl>\r\n\r\n                                    <MarkerClusterGroup>\r\n                                        {\r\n                                            this.state.data == null?\r\n                                            <div>Waiting for data to load...</div>\r\n                                            :\r\n                                            this.state.data.rows.map(\r\n                                                marker => {\r\n                                                    return (\r\n                                                        <Marker position={[marker['latitude'], marker['longitude']]} key={marker['entityId']} onclick={() => this.handleMarkerChange(marker)}>\r\n                                                            <Popup>\r\n                                                                <p>Object ID: {marker['entityId']}</p>\r\n                                                                <p>Lat: {marker['latitude']}</p>\r\n                                                                <p>Lon: {marker['longitude']}</p>\r\n                                                            </Popup>\r\n                                                        </Marker>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </MarkerClusterGroup>\r\n                                </Map>\r\n                                <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                                    {\r\n                                        this.state.currentMarker == null?\r\n                                        <h3>Select a fire for more info.</h3>\r\n                                        :\r\n                                        <div>\r\n                                            <h3>Fire Information</h3>\r\n                                            <hr/>\r\n                                            {\r\n                                                this.state.features.map(\r\n                                                    feature => {\r\n                                                        return (\r\n                                                        <div>\r\n                                                            <strong>{feature}: </strong>{this.state.currentMarker[feature]}\r\n                                                            <br/>\r\n                                                            </div>\r\n                                                        )\r\n                                                    }\r\n                                                )\r\n                                            }\r\n\r\n                                        </div>\r\n                                    }\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SatelliteDataCollection;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\FireHistoryDataCollection.js",["139","140","141","142","143"],"import React from 'react';\r\nimport CountySelector from '../Components/CountySelector';\r\nimport { MDBDataTable } from 'mdbreact';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport FilterDiv from '../Components/FilterDiv';\r\n\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass FireHistoryDataCollection extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USDA',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            currentCounty: 'Alameda',\r\n            data: null,\r\n            currentView: 'Table View',\r\n            currentFire: null,\r\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\r\n        }\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        year = parseInt(year)-1;\r\n\r\n        var yearAgo = year+'-'+month+'-'+day;\r\n\r\n        this.getUSDAFireData(yearAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USDA'){\r\n            this.getUSDAFireData(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSDAFireData(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        // var startYear = start.slice(0, 4);\r\n        // var endYear = end.slice(0, 4);\r\n\r\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\r\n\r\n        fetch(prodUrl + '/api/getUSDAFireData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var rawData = resData['data'];\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n    \r\n            for(const feature of this.state.features){\r\n                var newColEntry = {\r\n                    label: feature,\r\n                    field: feature,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            var i = 0;\r\n            for(i=0; i < rawData['features'].length; i++){\r\n                var newRowEntry = {}\r\n                for(var feature of this.state.features){\r\n                    var val = rawData['features'][i]['attributes'][feature];\r\n                    if(val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[feature] = val;\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    handleFireChange(newFire){\r\n        this.setState({\r\n            currentFire: newFire,\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('../images/fire.png'),\r\n            iconUrl: require('../images/fire.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png'),\r\n        });\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n                <FilterDiv\r\n                    pageType='dataCollection' \r\n                    dataType='fireHistory'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                />\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Table View'?\r\n                        <div>\r\n                        {\r\n                            !this.state.data?\r\n                            <div>Getting data...</div>\r\n                            :\r\n                            <MDBDataTable responsive\r\n                            striped\r\n                            bordered\r\n                            data={this.state.data}\r\n                            />\r\n                        }\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n\r\n                            <LayersControl position=\"topright\">\r\n\r\n                                <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                    <TileLayer\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                    />\r\n                                </LayersControl.BaseLayer>\r\n\r\n                                <LayersControl.BaseLayer name=\"Street\">\r\n                                    <TileLayer\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                    />\r\n                                </LayersControl.BaseLayer>\r\n\r\n                                <LayersControl.BaseLayer name=\"Satellite\">\r\n                                    <TileLayer\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                    />\r\n                                </LayersControl.BaseLayer>\r\n\r\n                                <LayersControl.BaseLayer name=\"Terrain\">\r\n                                    <TileLayer\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                    />\r\n                                </LayersControl.BaseLayer>\r\n\r\n                                <LayersControl.BaseLayer name=\"Dark\">\r\n                                    <TileLayer\r\n                                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                    url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                    />\r\n                                </LayersControl.BaseLayer>\r\n\r\n                            </LayersControl>\r\n\r\n                            <MarkerClusterGroup>\r\n                                {\r\n                                    this.state.data == null?\r\n                                    <div>Waiting for data to load...</div>\r\n                                    :\r\n                                    this.state.data.rows.map(\r\n                                        marker => {\r\n                                            return (\r\n                                                <Marker position={[marker['POO_LATITUDE'], marker['POO_LONGITUDE']]} key={marker['OBJECTID']} onclick={() => this.handleFireChange(marker)}>\r\n                                                    <Popup>\r\n                                                        <p>Object ID: {marker['OBJECTID']}</p>\r\n                                                        <p>Lat: {marker['POO_LATITUDE']}</p>\r\n                                                        <p>Lon: {marker['POO_LONGITUDE']}</p>\r\n                                                    </Popup>\r\n                                                </Marker>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </MarkerClusterGroup>\r\n                        </Map>\r\n                        <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                        {\r\n                            this.state.currentFire == null?\r\n                            <h3>Select a fire for more info.</h3>\r\n                            :\r\n                            <div>\r\n                                <h3>Fire Information</h3>\r\n                                <hr/>\r\n                                {\r\n                                    this.state.features.map(\r\n                                        feature => {\r\n                                            return (\r\n                                               <div key={feature}>\r\n                                                   <strong>{feature}: </strong>{this.state.currentFire[feature]}\r\n                                                   <br/>\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                        }\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default FireHistoryDataCollection;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataCollectionComponents\\WeatherDataCollection.js",["144","145"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDiv from '../Components/FilterDiv';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass WeatherDataCollection extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'NOAA',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            currentCounty: 'Alameda',\r\n            data: null,\r\n            currentView: 'Table View',\r\n            currentMarker: null,\r\n            weatherStationData: null,\r\n            currentWeatherStation: null,\r\n            weatherStationFeatures: ['datacoverage', 'elevation', 'elevationUnit', 'id', 'latitude', 'longitude', 'maxdate', 'mindate', 'name'],\r\n            startDate: null,\r\n            endDate: null,\r\n\r\n        }\r\n\r\n        this.getData = this.getData.bind(this);\r\n        this.getNOAAdata = this.getNOAAdata.bind(this);\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.handleWeatherStationChange = this.handleWeatherStationChange.bind(this);\r\n        this.onCountyMouseout = this.onCountyMouseout.bind(this);\r\n        this.onCountyMouseover = this.onCountyMouseover.bind(this);\r\n        this.onEachCounty = this.onEachCounty.bind(this);\r\n        this.getFeatureData = this.getFeatureData.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: monthAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getNOAAdata(monthAgo, today);\r\n\r\n    }\r\n\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'NOAA'){\r\n            this.getNOAAdata(startDate, endDate);\r\n        }\r\n    }\r\n\r\n    getNOAAdata(start, end){\r\n        this.setState({\r\n            data: null,\r\n        })\r\n\r\n        fetch(prodUrl + '/api/getNOAAdata', {\r\n            method:'POST',\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            var rawData = response['rawData'];\r\n            var weatherStationData = response['weatherStationData']\r\n            weatherStationData = JSON.parse(weatherStationData)\r\n            weatherStationData = weatherStationData['results'];\r\n\r\n            this.setState({\r\n                weatherStationData: weatherStationData,\r\n            })\r\n\r\n            var parsedData = JSON.parse(rawData);\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n        \r\n            for(const key in parsedData){\r\n                var newColEntry = {\r\n                    label: key,\r\n                    field: key,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \r\n                var newRowEntry = {}\r\n                for(const key in parsedData){\r\n                    var val = parsedData[key][i];\r\n                    if (val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[key] = val\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        // console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    handleWeatherStationChange(newWeatherStation){\r\n        this.setState({\r\n            currentWeatherStation: newWeatherStation,\r\n        })\r\n    }\r\n\r\n    onCountyMouseover(event){\r\n        event.target.setStyle({\r\n            fillOpacity: 0.9,\r\n        });\r\n    }\r\n\r\n    onCountyMouseout(event){\r\n        event.target.setStyle({\r\n            fillOpacity: 0.3,\r\n        });\r\n    }\r\n\r\n    onEachCounty(county, layer){\r\n        var countyName = county.properties.name;\r\n        layer.bindPopup(countyName);\r\n\r\n        layer.on({\r\n            mouseover: this.onCountyMouseover,\r\n            mouseout: this.onCountyMouseout,\r\n        })\r\n    }\r\n\r\n    getFeatureData(feature){\r\n        var data = [];\r\n        var temp = {};\r\n        for(var row of this.state.data['rows']){\r\n            if(!(row['STATION'] in temp)){\r\n                temp[row['STATION']] = {\r\n                    'x': [],\r\n                    'y': [],\r\n                    type: 'line',\r\n                    name: row['STATION'],\r\n                }\r\n            }\r\n            temp[row['STATION']]['x'].push(row['DATE']);\r\n            temp[row['STATION']]['y'].push(row[feature]);\r\n        }\r\n        for(var station of Object.keys(temp)){\r\n            data.push(temp[station]);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        var tavg = null;\r\n        var tmin = null;\r\n        var tmax = null;\r\n        if(this.state.data != null){\r\n            tavg = this.getFeatureData('TAVG');\r\n            tmin = this.getFeatureData('TMIN');\r\n            tmax = this.getFeatureData('TMAX');\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n                <FilterDiv \r\n                    pageType='dataCollection'\r\n                    dataType='weather'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n                <p>\r\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\r\n                </p>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Table View'?\r\n                        <div>\r\n                            {\r\n                                !this.state.data?\r\n                                <div>Getting data...</div>\r\n                                :\r\n                                <div>\r\n                                    <MDBDataTable responsive\r\n                                    striped\r\n                                    bordered\r\n                                    data={this.state.data}\r\n                                    />\r\n                                    <br/>\r\n                                    <hr/>\r\n\r\n                                    <h4>Graphs</h4>\r\n                                    <br/>\r\n                                    <Plot\r\n                                        style = {{height:'400px'}}\r\n                                        data = {tavg}\r\n                                        layout = {{showlegend: true, title:'TAVG over time'}}\r\n                                        config = {{responsive:true }}\r\n                                    />\r\n                                    <br/>\r\n                                    <Plot\r\n                                        style = {{ height:'400px'}}\r\n                                        data = {tmin}\r\n                                        layout = {{showlegend:true, title: 'TMIN over time' }}\r\n                                        config = {{responsive:true }}\r\n                                    />\r\n                                    <br/>\r\n                                    <Plot\r\n                                        style = {{height:'400px'}}\r\n                                        data = {tmax}\r\n                                        layout = {{showlegend:true, title:'TMAX over time' }}\r\n                                        config = {{responsive:true }}\r\n                                    />\r\n\r\n                                </div>\r\n                                \r\n                            }\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n\r\n\r\n                                <MarkerClusterGroup>\r\n                                    {\r\n                                        this.state.weatherStationData == null?\r\n                                        <div>Waiting for data to load...</div>\r\n                                        :\r\n                                        this.state.weatherStationData.map(\r\n                                            marker => {\r\n                                                return (\r\n                                                    <Marker position={[marker['latitude'], marker['longitude']]} key={marker['id']} onclick={() => this.handleWeatherStationChange(marker)}>\r\n                                                        <Popup>\r\n                                                            <p>ID: {marker['id']}</p>\r\n                                                            <p>Lat: {marker['latitude']}</p>\r\n                                                            <p>Lon: {marker['longitude']}</p>\r\n                                                        </Popup>\r\n                                                    </Marker>\r\n                                                )\r\n                                            }\r\n                                        )\r\n                                    }\r\n                                </MarkerClusterGroup>\r\n                            </Map>\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.currentWeatherStation == null?\r\n                                <h3>Select a weather station for more info.</h3>\r\n                                :\r\n                                <div>\r\n                                    <h3>Station info.</h3>\r\n                                    <hr/>\r\n                                    {\r\n                                        this.state.weatherStationFeatures.map(\r\n                                            feature => {\r\n                                                return (\r\n                                                <div key={feature}>\r\n                                                    <strong>{feature}: </strong>{this.state.currentWeatherStation[feature]}\r\n                                                    <br/>\r\n                                                    </div>\r\n                                                )\r\n                                            }\r\n                                        )\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherDataCollection;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\LandCoverDataAnalysis.js",["146","147","148","149","150","151","152","153","154"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDiv from '../Components/FilterDiv';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass LandCoverDataAnalysis extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USDA',\r\n            currentCounty: 'Alameda',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\r\n            summaryData: {\r\n                'Most common land cover': 'fields',\r\n                'Biggest fire': '2,600 acres',\r\n                'Smallest fire': '20 acres',\r\n                \r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        year = parseInt(year)-1;\r\n\r\n        var yearAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: yearAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getUSDAFireData(yearAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USDA'){\r\n            this.getUSDAFireData(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSDAFireData(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        // var startYear = start.slice(0, 4);\r\n        // var endYear = end.slice(0, 4);\r\n\r\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\r\n\r\n        fetch(prodUrl + '/api/getUSDAFireData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var rawData = resData['data'];\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n    \r\n            for(const feature of this.state.features){\r\n                var newColEntry = {\r\n                    label: feature,\r\n                    field: feature,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            var i = 0;\r\n            for(i=0; i < rawData['features'].length; i++){\r\n                var newRowEntry = {}\r\n                for(var feature of this.state.features){\r\n                    var val = rawData['features'][i]['attributes'][feature];\r\n                    if(val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[feature] = val;\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDiv \r\n                    pageType='dataAnalysis'\r\n                    dataType='landCover'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Important statistics:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n\r\n                            <img src='https://www.nrcs.usda.gov/Internet/FSE_MEDIA/stelprdb1083137.png' alt='landCover' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src='https://www.researchgate.net/publication/335177876/figure/fig4/AS:792146537877504@1565873860020/Land-Cover-Graph-of-Mataram-in-2008-2013-and-2017.png' alt='landCover2' width='100%' style={{margin:'20px 0'}} />\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandCoverDataAnalysis;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\SatelliteDataAnalysis.js",["155","156","157","158","159","160","161","162","163"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDiv from '../Components/FilterDiv';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass SatelliteDataAnalysis extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USGS',\r\n            currentCounty: 'Alameda',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\r\n            summaryData: {\r\n                'Avg fires per year': '8',\r\n                'Biggest fire': '2,600 acres',\r\n                'Smallest fire': '20 acres',\r\n                \r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSGSdata = this.getUSGSdata.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: monthAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getUSGSdata(monthAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USDA'){\r\n            this.getUSGSdata(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSGSdata(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        fetch(prodUrl + '/api/getEarthExplorerData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                lat: lat,\r\n                lon: lon,\r\n                startDate: start,\r\n                endDate: end,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var scenes = resData['scenes'];\r\n\r\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n\r\n            for(const col of this.state.features){\r\n                var newColEntry = {\r\n                    label: col,\r\n                    field: col,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            for(var currentScene in scenes){\r\n                var newRowEntry = {}\r\n                for(var col of this.state.features){\r\n                    var val = scenes[currentScene][col];\r\n                    if(val == null){\r\n                        if(col == 'latitude'){\r\n                            val = lat\r\n                        }\r\n                        else if(col == 'longitude'){\r\n                            val = lon\r\n                        }\r\n                        else{\r\n                            val = ''\r\n                        }\r\n                    }\r\n                    // if(val == null){\r\n                    //     val = ''\r\n                    // }\r\n                    newRowEntry[col] = val\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDiv \r\n                    pageType='dataAnalysis'\r\n                    dataType='satellite'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Important statistics:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n\r\n                            <img src='https://www.epa.gov/sites/production/files/styles/large/public/2016-07/wildfires-figure3-2016.png' alt='fire' width='70%' style={{margin:'20px 0'}}/>\r\n                            <img src='https://eoimages.gsfc.nasa.gov/images/imagerecords/145000/145498/amazon_tamo_2012-2019_count_lrg.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SatelliteDataAnalysis;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\WeatherDataAnalysis.js",["164","165","166","167","168","169","170"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDiv from '../Components/FilterDiv';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass WeatherDataCollection extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'NOAA',\r\n            currentCounty: 'Alameda',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            summaryData: {\r\n                'Avg temp': '78.6 F',\r\n                'Lowest temp': '46.9 F',\r\n                'Highest temp': '99.3 F',\r\n                'Avg windspeed': '9 mph',\r\n                'Lowest windspeed': '2 mph',\r\n                'Highest windspeed': '22 mph',\r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getNOAAdata = this.getNOAAdata.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: monthAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getNOAAdata(monthAgo, today);\r\n\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'NOAA'){\r\n            this.getNOAAdata(startDate, endDate);\r\n        }\r\n    }\r\n\r\n    getNOAAdata(start, end){\r\n        fetch(prodUrl + '/api/getNOAAdata', {\r\n            method:'POST',\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            var rawData = response['rawData'];\r\n            var weatherStationData = response['weatherStationData']\r\n            weatherStationData = JSON.parse(weatherStationData)\r\n            weatherStationData = weatherStationData['results'];\r\n\r\n            // console.log(weatherStationData);\r\n\r\n            this.setState({\r\n                weatherStationData: weatherStationData,\r\n            })\r\n\r\n            var parsedData = JSON.parse(rawData);\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n        \r\n            for(const key in parsedData){\r\n                var newColEntry = {\r\n                    label: key,\r\n                    field: key,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \r\n                var newRowEntry = {}\r\n                for(const key in parsedData){\r\n                    var val = parsedData[key][i];\r\n                    if (val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[key] = val\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDiv \r\n                    pageType='dataAnalysis'\r\n                    dataType='weather'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Important statistics:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n\r\n                            <img src='https://eldoradoweather.com/current/climate/images/San%20Diego.png' alt='weather' width='45%' style={{margin:'20px 0'}}/>\r\n                            <img src='https://www.westjet.com/vacations/img/destinations/en-weather-charts/United-States-Hawaii/SAN-San-Diego_weather-chart.gif' alt='weather2' height='300px' style={{margin:'20px 0'}} />\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherDataCollection;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\DataAnalysisComponents\\FireHistoryDataAnalysis.js",["171","172","173","174","175","176","177","178","179"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDiv from '../Components/FilterDiv';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass FireHistoryDataAnalysis extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USDA',\r\n            currentCounty: 'Alameda',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\r\n            summaryData: {\r\n                'Avg fires per year': '8',\r\n                'Biggest fire': '2,600 acres',\r\n                'Smallest fire': '20 acres',\r\n                \r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDiv = this.toggleFilterDiv.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        year = parseInt(year)-1;\r\n\r\n        var yearAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: yearAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getUSDAFireData(yearAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USDA'){\r\n            this.getUSDAFireData(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSDAFireData(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        // var startYear = start.slice(0, 4);\r\n        // var endYear = end.slice(0, 4);\r\n\r\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\r\n\r\n        fetch(prodUrl + '/api/getUSDAFireData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var rawData = resData['data'];\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n    \r\n            for(const feature of this.state.features){\r\n                var newColEntry = {\r\n                    label: feature,\r\n                    field: feature,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            var i = 0;\r\n            for(i=0; i < rawData['features'].length; i++){\r\n                var newRowEntry = {}\r\n                for(var feature of this.state.features){\r\n                    var val = rawData['features'][i]['attributes'][feature];\r\n                    if(val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[feature] = val;\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDiv(){\r\n        var filterDiv = document.getElementById('filterDiv');\r\n        if(filterDiv.style.display == ''){\r\n            filterDiv.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDiv.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDiv \r\n                    pageType='dataAnalysis'\r\n                    dataType='fireHistory'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDiv={this.toggleFilterDiv}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Data for: </strong>{this.state.currentCounty} County ({this.state.startDate} to {this.state.endDate})\r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Important statistics:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n\r\n                            <img src='https://www.nctrails.org/sites/default/files/Fire-Causes-Graph.png' alt='fire' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src='https://akfireinfo.files.wordpress.com/2015/07/jun30acreage.png' alt='fire2' width='100%' style={{margin:'20px 0'}} />\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FireHistoryDataAnalysis;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluationComponents\\FireDetectionModEval.js",["180","181","182","183","184","185","186"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDivModEval from '../Components/FilterDivModEval';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass FireDetectionModEval extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'NOAA',\r\n            currentCounty: 'San Diego',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            summaryData: {\r\n                'Satellite Image Source': 'Landsat 8',\r\n                'Tensorflow Model Version': 'Faster RCNN - Resnet 50 v2.1',\r\n                'Fire  Detected': 'YES',\r\n                'Confidence Level': '97%',\r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getNOAAdata = this.getNOAAdata.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: monthAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getNOAAdata(monthAgo, today);\r\n\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'NOAA'){\r\n            this.getNOAAdata(startDate, endDate);\r\n        }\r\n    }\r\n\r\n    getNOAAdata(start, end){\r\n        fetch(prodUrl + '/api/getNOAAdata', {\r\n            method:'POST',\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(response => {\r\n            var rawData = response['rawData'];\r\n            var weatherStationData = response['weatherStationData']\r\n            weatherStationData = JSON.parse(weatherStationData)\r\n            weatherStationData = weatherStationData['results'];\r\n\r\n            // console.log(weatherStationData);\r\n\r\n            this.setState({\r\n                weatherStationData: weatherStationData,\r\n            })\r\n\r\n            var parsedData = JSON.parse(rawData);\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n        \r\n            for(const key in parsedData){\r\n                var newColEntry = {\r\n                    label: key,\r\n                    field: key,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            for(var i=0; i<Object.keys(parsedData['DATE']).length; i++){      \r\n                var newRowEntry = {}\r\n                for(const key in parsedData){\r\n                    var val = parsedData[key][i];\r\n                    if (val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[key] = val\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDivModEval(){\r\n        var filterDivModEval = document.getElementById('filterDivModEval');\r\n        if(filterDivModEval.style.display == ''){\r\n            filterDivModEval.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDivModEval.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDivModEval \r\n                    pageType='dataAnalysis'\r\n                    dataType='fireDetection'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Fire Detection for: </strong>{this.state.currentCounty} County   date:  {this.state.endDate}\r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Evaluation Results:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n\r\n                            <img src={process.env.PUBLIC_URL + 'images/fireDetection_San_Diego.png'} alt='fire' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_1.png'} alt='fire2' width='50%' style={{margin:'20px 0'}} />\r\n                            <img src={process.env.PUBLIC_URL + 'images/detMod_2.png'} alt='fire3' width='50%' style={{margin:'20px 0'}} />\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FireDetectionModEval;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluationComponents\\FireRiskPredictionModEval.js",["187","188","189","190","191","192","193","194","195"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDivModEval from '../Components/FilterDivModEval';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass FireRiskPredictionModEval extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USGS',\r\n            currentCounty: 'San Diego',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            features: ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ],\r\n            summaryData: {\r\n                'Weather Model 1': 'SVM',\r\n                'Weather Model 2': 'XGBoost',\r\n                'Weather Model 3': 'Random Forest',\r\n                'Remote Sensing  Model 1': 'CNN',\r\n                'Remote Sensing  Model 2': 'MultiLayer Perceptron',\r\n                \r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSDAFireData = this.getUSDAFireData.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        year = parseInt(year)-1;\r\n\r\n        var yearAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: yearAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getUSDAFireData(yearAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USDA'){\r\n            this.getUSDAFireData(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSDAFireData(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        // var startYear = start.slice(0, 4);\r\n        // var endYear = end.slice(0, 4);\r\n\r\n        // var features = ['OBJECTID', 'FIRE_NAME', 'STATE_NAME', 'COUNTY_NAME', 'DISCOVER_YEAR', 'POO_LATITUDE', 'POO_LONGITUDE', 'FIRE_SIZE_CLASS', 'TOTAL_ACRES_BURNED', 'STATION_NAME' ]\r\n\r\n        fetch(prodUrl + '/api/getUSDAFireData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                startDate: start,\r\n                endDate: end,\r\n                county: this.state.currentCounty,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var rawData = resData['data'];\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n    \r\n            for(const feature of this.state.features){\r\n                var newColEntry = {\r\n                    label: feature,\r\n                    field: feature,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            var i = 0;\r\n            for(i=0; i < rawData['features'].length; i++){\r\n                var newRowEntry = {}\r\n                for(var feature of this.state.features){\r\n                    var val = rawData['features'][i]['attributes'][feature];\r\n                    if(val == null){\r\n                        val = ''\r\n                    }\r\n                    newRowEntry[feature] = val;\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data,\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDivModEval(){\r\n        var filterDivModEval = document.getElementById('filterDivModEval');\r\n        if(filterDivModEval.style.display == ''){\r\n            filterDivModEval.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDivModEval.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDivModEval \r\n                    pageType='dataAnalysis'\r\n                    dataType='fireRiskPrediction'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Fire Risk Prediction  for: </strong>{this.state.currentCounty} County  date: {this.state.endDate}\r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Evaluation - Weather Model:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n                            <h4>1 - SVM </h4>\r\n                            <br/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/svm1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/svm2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n                            <hr/>\r\n                            <h4>2 - XGBoost </h4>\r\n                            <br/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/xg1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/xg2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n                            <hr/>\r\n                            <h4>3 - Random Forest </h4>\r\n                            <br/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/rf1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/rf2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n                            <hr/>\r\n                            <hr/>\r\n                        \r\n                       \r\n                            <h3>Evaluation - Remote Sensing Model:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n                            <h4>1 - CNN </h4>\r\n                            <br/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/cnn1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/cnn2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n                            <hr/>\r\n                            <h4>2 - MultiLayer Perceptron </h4>\r\n                            <br/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/mlp1.png'} alt='svm1' width='60%' style={{margin:'20px 0'}}/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/mlp2.png'} alt='svm2' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FireRiskPredictionModEval;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\ModelEvaluationComponents\\FireProgressionModEval.js",["196","197","198","199","200","201","202","203","204"],"import React from 'react';\r\nimport '../css/reactPaginationStyle.css';\r\nimport { MDBDataTable } from 'mdbreact';\r\n// import CountySelector from '../Components/CountySelector';\r\nimport {Map, TileLayer, LayersControl, Marker, Popup, GeoJSON} from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport L from 'leaflet';\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\nimport Plot from 'react-plotly.js';\r\nimport FilterDivModEval from '../Components/FilterDivModEval';\r\nimport counties from '../counties.json';\r\n\r\nconst devUrl = '';\r\nconst prodUrl = 'https://wildfire-ml-flask.herokuapp.com';\r\n\r\nclass FireProgressionModEval extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            source: 'USGS',\r\n            currentCounty: 'San Diego',\r\n            lat: props.lat,\r\n            lon: props.lon,\r\n            data: null,\r\n            currentView: 'Statistic View',\r\n            startDate: null,\r\n            endDate: null,\r\n            features: ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude'],\r\n            summaryData: {\r\n                'Fire Animation Start': 'Oct 20, 2007',\r\n                'Fire Animation End': 'Oct 24, 2007',\r\n                \r\n            },\r\n        }\r\n\r\n        this.formatDate = this.formatDate.bind(this);\r\n        this.getData = this.getData.bind(this);\r\n        this.getUSGSdata = this.getUSGSdata.bind(this);\r\n        this.handleViewChange = this.handleViewChange.bind(this);\r\n        this.toggleFilterDivModEval = this.toggleFilterDivModEval.bind(this);\r\n        this.changeCounty = this.changeCounty.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        var today = new Date();\r\n\r\n        var year = today.getFullYear();\r\n        var month = today.getMonth();\r\n        var day = today.getDate();\r\n\r\n        var dd = String(today.getDate()).padStart(2, '0');\r\n        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n        var yyyy = today.getFullYear();\r\n\r\n        today = yyyy + '-' + mm + '-' + dd;\r\n\r\n        if(month < 10){\r\n            month = \"0\" + month;\r\n        }\r\n        if(day < 10){\r\n            day = \"0\" + day;\r\n        }\r\n\r\n        var monthAgo = year+'-'+month+'-'+day;\r\n\r\n        this.setState({\r\n            startDate: monthAgo,\r\n            endDate: today,\r\n        })\r\n\r\n        this.getUSGSdata(monthAgo, today);\r\n    }\r\n\r\n    formatDate(date) {\r\n        var d = new Date(date),\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n    \r\n        if (month.length < 2) \r\n            month = '0' + month;\r\n        if (day.length < 2) \r\n            day = '0' + day;\r\n    \r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    getData(){\r\n        var startDate = document.getElementById('startDateInput').value;\r\n        var endDate = document.getElementById('endDateInput').value;\r\n\r\n        var today = new Date();\r\n        today = this.formatDate(today);\r\n\r\n        if(startDate > today || startDate > today || endDate > today || endDate > today){\r\n            alert(\"Can't pick future dates.\");\r\n            return;\r\n        }\r\n\r\n        if(startDate > endDate){\r\n            alert('Start date must be before end date.');\r\n            return;\r\n        }\r\n\r\n        if(startDate === '' || endDate === ''){\r\n            alert('Please select a start and end date');\r\n            return;\r\n        }\r\n\r\n        if(this.state.source === 'USDA'){\r\n            this.getUSGSdata(startDate, endDate);\r\n        }\r\n\r\n    }\r\n\r\n    getUSGSdata(start, end){\r\n        var lat = this.state.lat;\r\n        var lon = this.state.lon;\r\n\r\n        fetch(prodUrl + '/api/getEarthExplorerData', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                lat: lat,\r\n                lon: lon,\r\n                startDate: start,\r\n                endDate: end,\r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(resData => {\r\n            var scenes = resData['scenes'];\r\n\r\n            // var columnsToDisplay = ['startTime', 'endTime', 'acquisitionDate', 'cloudCover', 'displayId', 'entityId', 'latitude', 'longitude']\r\n\r\n            var cols = [];\r\n            var rows = [];\r\n\r\n            for(const col of this.state.features){\r\n                var newColEntry = {\r\n                    label: col,\r\n                    field: col,\r\n                    sort: 'asc',\r\n                    width: 150,\r\n                }\r\n                cols.push(newColEntry);\r\n            }\r\n\r\n            for(var currentScene in scenes){\r\n                var newRowEntry = {}\r\n                for(var col of this.state.features){\r\n                    var val = scenes[currentScene][col];\r\n                    if(val == null){\r\n                        if(col == 'latitude'){\r\n                            val = lat\r\n                        }\r\n                        else if(col == 'longitude'){\r\n                            val = lon\r\n                        }\r\n                        else{\r\n                            val = ''\r\n                        }\r\n                    }\r\n                    // if(val == null){\r\n                    //     val = ''\r\n                    // }\r\n                    newRowEntry[col] = val\r\n                }\r\n                rows.push(newRowEntry);\r\n            }\r\n\r\n            var data = {\r\n                columns: cols,\r\n                rows: rows,\r\n            }\r\n\r\n            this.setState({\r\n                data: data\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    handleViewChange(event){\r\n        console.log('changed to: '+event.target.innerHTML);\r\n        this.setState({\r\n            currentView: event.target.innerHTML,\r\n        })\r\n    }\r\n\r\n    toggleFilterDivModEval(){\r\n        var filterDivModEval = document.getElementById('filterDivModEval');\r\n        if(filterDivModEval.style.display == ''){\r\n            filterDivModEval.style.display = 'none';\r\n        }\r\n        else{\r\n            filterDivModEval.style.display = '';\r\n        }\r\n    }\r\n\r\n    changeCounty(childData){\r\n        this.setState({\r\n            currentCounty: childData,\r\n        })\r\n    }\r\n\r\n    handleStartDateChange(newStartDate){\r\n        this.setState({\r\n            startDate: newStartDate,\r\n        })\r\n    }\r\n\r\n    handleEndDateChange(newEndDate){\r\n        this.setState({\r\n            endDate: newEndDate,\r\n        })\r\n    }\r\n\r\n\r\n    render(){\r\n        delete L.Icon.Default.prototype._getIconUrl;\r\n        L.Icon.Default.mergeOptions({\r\n            iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\r\n            iconUrl: require('leaflet/dist/images/marker-icon.png'),\r\n            shadowUrl: require('leaflet/dist/images/marker-shadow.png')\r\n        });\r\n\r\n        var countyStyle = {\r\n            color: '#4a83ec',\r\n            weight: 1,\r\n            fillColor: \"#AED7FF\",\r\n            fillOpacity: 0.3,\r\n        }\r\n\r\n        return(\r\n            <div className=\"jumbotron\" style={{margin:'10px 0 50px 0', paddingTop:'20px', overflow:'auto'}}>\r\n\r\n                <FilterDivModEval \r\n                    pageType='dataAnalysis'\r\n                    dataType='fireProgression'\r\n                    getData={this.getData}\r\n                    changeCounty={this.changeCounty}\r\n                    toggleFilterDivModEval={this.toggleFilterDivModEval}\r\n                    currentView={this.state.currentView}\r\n                    handleViewChange={this.handleViewChange}\r\n                    handleStartDateChange={this.handleStartDateChange}\r\n                    handleEndDateChange={this.handleEndDateChange}\r\n                />\r\n\r\n                <p>\r\n                    <strong>Data for: </strong>{this.state.currentCounty} County 2007-10-20  to 2007-10-24 \r\n                </p>\r\n                <hr/>\r\n                <div>\r\n                    {\r\n                        this.state.currentView === 'Statistic View'?\r\n                        <div>\r\n                            <h3>Fire Spread Ground Truth:</h3>\r\n                            <br/>\r\n                            <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                {\r\n                                    Object.keys(this.state.summaryData).map(\r\n                                        key => {\r\n                                            return (\r\n                                                <div key={key} style={{margin:'6px 24px 6px 0'}}>\r\n                                                    <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    )\r\n                                }\r\n                            </div>\r\n                            <hr/>\r\n\r\n                            <img src='http://worldlywise.pbworks.com/f/1274641471/All_3D.gif' alt='fire' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n                            <hr/>\r\n                            <hr/>\r\n                            <h3>Predicted Fire Progression:</h3>\r\n                            <hr/>\r\n                            <img src={process.env.PUBLIC_URL + 'images/spread.gif'} alt='spread2' width='60%' style={{margin:'20px 0'}}/>\r\n\r\n                            <hr/>\r\n                            <br/>\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            <Map style={{height:'calc(100vh - 200px)', width:'calc(100vw - 600px)', border:'1px solid black', float:'left'}} zoom={6} center={[this.state.lat, this.state.lon]}>\r\n                                <LayersControl position=\"topright\">\r\n\r\n                                    <LayersControl.BaseLayer name=\"Topology\" checked>\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Street\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Satellite\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Terrain\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Terrain_Base/MapServer/tile/{z}/{y}/{x}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.BaseLayer name=\"Dark\">\r\n                                        <TileLayer\r\n                                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                                        url=\"https://tiles.stadiamaps.com/tiles/alidade_smooth_dark/{z}/{x}/{y}{r}.png\"\r\n                                        />\r\n                                    </LayersControl.BaseLayer>\r\n\r\n                                    <LayersControl.Overlay name=\"Show Counties\" >\r\n                                        <GeoJSON data={counties.features}  style={countyStyle} onEachFeature={this.onEachCounty}/>\r\n                                    </LayersControl.Overlay>\r\n\r\n                                </LayersControl>\r\n                            </Map>\r\n\r\n                            <div style={{float:'right', padding:'6px', width:'230px'}}>\r\n                            {\r\n                                this.state.summaryData == null?\r\n                                <p>Important statistics:</p>\r\n                                :\r\n                                <div>\r\n                                    <p>Important statistics:</p>\r\n                                    <hr/>\r\n                                    <div style={{display:'flex', flexWrap:'wrap'}}>\r\n                                        {\r\n                                            Object.keys(this.state.summaryData).map(\r\n                                                key => {\r\n                                                    return (\r\n                                                        <div key={key} style={{margin:'4px 0'}}>\r\n                                                            <strong>{key}: </strong>{this.state.summaryData[key]}\r\n                                                        </div>\r\n                                                    )\r\n                                                }\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n\r\n                        </div>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FireProgressionModEval;\r\n","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\FilterDiv.js",["205"],"import React from 'react';\r\nimport CountySelector from './CountySelector';\r\n\r\nclass FilterDiv extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.changeStartDate = this.changeStartDate.bind(this);\r\n        this.changeEndDate = this.changeEndDate.bind(this);\r\n    }\r\n\r\n    changeStartDate(event){\r\n        this.props.handleStartDateChange(event.target.value);\r\n    }\r\n\r\n    changeEndDate(event){\r\n        this.props.handleEndDateChange(event.target.value);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <div style={{width:'100%', height:'50px'}}>\r\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\r\n                        {\r\n                            this.props.dataType === 'weather'?\r\n                            'Weather'\r\n                            :\r\n                            this.props.dataType === 'fireHistory'?\r\n                            'Fire History'\r\n                            :\r\n                            this.props.dataType === 'landCover'?\r\n                            'Land Cover'\r\n                            :\r\n                            this.props.dataType === 'satellite'?\r\n                            'Satellite'\r\n                            :\r\n                            <div></div>\r\n                        }\r\n                    </h4>\r\n\r\n                    {\r\n                        this.props.pageType === 'dataCollection'?\r\n                            this.props.currentView === 'Table View'?\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\r\n                            :\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\r\n                        :\r\n                        this.props.pageType === 'dataAnalysis'?\r\n                            this.props.currentView === 'Statistic View'?\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\r\n                            :\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\r\n                        :\r\n                        <div></div>\r\n                    }\r\n\r\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDiv}>\r\n                        Filter \r\n                        &nbsp;\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n\r\n                <div style={{display:'none', height:'auto'}} id='filterDiv'>\r\n                    <div style={{width:'100%'}}>\r\n                        <div style={{float:'left'}}>\r\n                            Source: &nbsp;&nbsp;\r\n                            {\r\n                                this.props.dataType === 'weather'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='NOAA'>NOAA</option>\r\n                                </select>\r\n                                :\r\n                                this.props.dataType === 'fireHistory'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='USDA'>USDA</option>\r\n                                </select>\r\n                                :\r\n                                this.props.dataType === 'landCover'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='USGS'>USGS</option>\r\n                                </select>\r\n                                :\r\n                                this.props.dataType === 'satellite'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='USGS'>USGS</option>\r\n                                </select>\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                        </div>\r\n                        <div style={{float:'right'}}>\r\n                            From:&nbsp;\r\n                            <input type='date' style={{padding:'10px'}} id=\"startDateInput\" onChange={this.changeStartDate}/>\r\n                            &nbsp; - &nbsp;\r\n                            <input type='date' style={{padding:'10px'}} id='endDateInput' onChange={this.changeEndDate}/>\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        </div>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                    <div style={{width:'100%'}}>\r\n                        <div style={{float:'left'}}>\r\n                            County: &nbsp;&nbsp;\r\n                            <CountySelector parentCallback={this.props.changeCounty}/>\r\n                        </div>\r\n                        <button className='btn btn-primary' onClick={this.props.getData} style={{float:'right', marginRight:'16px'}}>Get Data</button>\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <hr/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterDiv;","C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\CountySelector.js",[],"C:\\Users\\fmbxj\\Desktop\\wildfire-prediction\\src\\Components\\FilterDivModEval.js",["206"],"import React from 'react';\r\nimport CountySelector from './CountySelector';\r\n\r\nclass FilterDivModEval extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.changeStartDate = this.changeStartDate.bind(this);\r\n        this.changeEndDate = this.changeEndDate.bind(this);\r\n    }\r\n\r\n    changeStartDate(event){\r\n        this.props.handleStartDateChange(event.target.value);\r\n    }\r\n\r\n    changeEndDate(event){\r\n        this.props.handleEndDateChange(event.target.value);\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n                <div style={{width:'100%', height:'50px'}}>\r\n                    <h4 style={{padding:'0 10px 0 0', float:'left', padding:'12px 0 0 0'}}>\r\n                        {\r\n                            this.props.dataType === 'fireDetection'?\r\n                            'Fire Detection'\r\n                            :\r\n                            this.props.dataType === 'fireRiskPrediction'?\r\n                            'Fire Risk Prediction'\r\n                            :\r\n                            this.props.dataType === 'landCover'?\r\n                            'Land Cover'\r\n                            :\r\n                            this.props.dataType === 'fireProgression'?\r\n                            'Fire Progression'\r\n                            :\r\n                            <div></div>\r\n                        }\r\n                    </h4>\r\n\r\n                    {\r\n                        this.props.pageType === 'dataCollection'?\r\n                            this.props.currentView === 'Table View'?\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\r\n                            :\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Table View</button>\r\n                        :\r\n                        this.props.pageType === 'dataAnalysis'?\r\n                            this.props.currentView === 'Statistic View'?\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Map View</button>\r\n                            :\r\n                            <button className='btn btn-success' onClick={this.props.handleViewChange} style={{float:'right', margin:'0 0 0 10px'}} >Statistic View</button>\r\n                        :\r\n                        <div></div>\r\n                    }\r\n\r\n                    <button className='btn btn-dark' style={{float:'right'}} onClick={this.props.toggleFilterDivModEval}>\r\n                        Filter \r\n                        &nbsp;\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-filter\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fillRule=\"evenodd\" d=\"M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z\"/>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n                <hr/>\r\n\r\n                <div style={{display:'none', height:'auto'}} id='filterDivModEval'>\r\n                    <div style={{width:'100%'}}>\r\n                        <div style={{float:'left'}}>\r\n                            Source: &nbsp;&nbsp;\r\n                            {\r\n                                this.props.dataType === 'fireDetection'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='NOAA'>NOAA</option>\r\n                                </select>\r\n                                :\r\n                                this.props.dataType === 'RiskPrediction'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='USDA'>USDA</option>\r\n                                </select>\r\n                                :\r\n                                this.props.dataType === 'landCover'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='USGS'>USGS</option>\r\n                                </select>\r\n                                :\r\n                                this.props.dataType === 'fireProgression'?\r\n                                <select id=\"dataSourceInput\" style={{padding:'14px'}}>\r\n                                    <option value='USGS'>USGS</option>\r\n                                </select>\r\n                                :\r\n                                <div></div>\r\n                            }\r\n                        </div>\r\n                        <div style={{float:'right'}}>\r\n                            From:&nbsp;\r\n                            <input type='date' style={{padding:'10px'}} id=\"startDateInput\" onChange={this.changeStartDate}/>\r\n                            &nbsp; - &nbsp;\r\n                            <input type='date' style={{padding:'10px'}} id='endDateInput' onChange={this.changeEndDate}/>\r\n                            &nbsp;&nbsp;&nbsp;&nbsp;\r\n                        </div>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                    </div>\r\n                    <div style={{width:'100%'}}>\r\n                        <div style={{float:'left'}}>\r\n                            County: &nbsp;&nbsp;\r\n                            <CountySelector parentCallback={this.props.changeCounty}/>\r\n                        </div>\r\n                        <button className='btn btn-primary' onClick={this.props.getData} style={{float:'right', marginRight:'16px'}}>Get Data</button>\r\n                    </div>\r\n                    <br/>\r\n                    <br/>\r\n                    <br/>\r\n                    <hr/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FilterDivModEval;\r\n",{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":85,"column":43,"nodeType":"213","messageId":"214","endLine":85,"endColumn":45},{"ruleId":"215","severity":1,"message":"216","line":87,"column":24,"nodeType":"217","messageId":"218","endLine":87,"endColumn":26},{"ruleId":"219","severity":1,"message":"220","line":135,"column":25,"nodeType":"221","messageId":"222","endLine":135,"endColumn":29},{"ruleId":"223","severity":1,"message":"224","line":2,"column":49,"nodeType":"221","messageId":"225","endLine":2,"endColumn":61},{"ruleId":"223","severity":1,"message":"226","line":57,"column":13,"nodeType":"221","messageId":"225","endLine":57,"endColumn":21},{"ruleId":"223","severity":1,"message":"226","line":56,"column":13,"nodeType":"221","messageId":"225","endLine":56,"endColumn":21},{"ruleId":"223","severity":1,"message":"227","line":5,"column":7,"nodeType":"221","messageId":"225","endLine":5,"endColumn":13},{"ruleId":"223","severity":1,"message":"228","line":6,"column":7,"nodeType":"221","messageId":"225","endLine":6,"endColumn":14},{"ruleId":"223","severity":1,"message":"229","line":2,"column":8,"nodeType":"221","messageId":"225","endLine":2,"endColumn":22},{"ruleId":"223","severity":1,"message":"230","line":102,"column":13,"nodeType":"221","messageId":"225","endLine":102,"endColumn":16},{"ruleId":"223","severity":1,"message":"231","line":103,"column":13,"nodeType":"221","messageId":"225","endLine":103,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":109,"column":36,"nodeType":"217","messageId":"218","endLine":109,"endColumn":38},{"ruleId":"223","severity":1,"message":"229","line":2,"column":8,"nodeType":"221","messageId":"225","endLine":2,"endColumn":22},{"ruleId":"223","severity":1,"message":"227","line":10,"column":7,"nodeType":"221","messageId":"225","endLine":10,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":146,"column":32,"nodeType":"217","messageId":"218","endLine":146,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":149,"column":37,"nodeType":"217","messageId":"218","endLine":149,"endColumn":39},{"ruleId":"215","severity":1,"message":"216","line":178,"column":36,"nodeType":"217","messageId":"218","endLine":178,"endColumn":38},{"ruleId":"223","severity":1,"message":"229","line":2,"column":8,"nodeType":"221","messageId":"225","endLine":2,"endColumn":22},{"ruleId":"223","severity":1,"message":"227","line":11,"column":7,"nodeType":"221","messageId":"225","endLine":11,"endColumn":13},{"ruleId":"223","severity":1,"message":"230","line":108,"column":13,"nodeType":"221","messageId":"225","endLine":108,"endColumn":16},{"ruleId":"223","severity":1,"message":"231","line":109,"column":13,"nodeType":"221","messageId":"225","endLine":109,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":168,"column":36,"nodeType":"217","messageId":"218","endLine":168,"endColumn":38},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":190,"column":36,"nodeType":"217","messageId":"218","endLine":190,"endColumn":38},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"223","severity":1,"message":"230","line":125,"column":13,"nodeType":"221","messageId":"225","endLine":125,"endColumn":16},{"ruleId":"223","severity":1,"message":"231","line":126,"column":13,"nodeType":"221","messageId":"225","endLine":126,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":192,"column":36,"nodeType":"217","messageId":"218","endLine":192,"endColumn":38},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":159,"column":32,"nodeType":"217","messageId":"218","endLine":159,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":162,"column":37,"nodeType":"217","messageId":"218","endLine":162,"endColumn":39},{"ruleId":"215","severity":1,"message":"216","line":198,"column":36,"nodeType":"217","messageId":"218","endLine":198,"endColumn":38},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":192,"column":36,"nodeType":"217","messageId":"218","endLine":192,"endColumn":38},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"223","severity":1,"message":"230","line":125,"column":13,"nodeType":"221","messageId":"225","endLine":125,"endColumn":16},{"ruleId":"223","severity":1,"message":"231","line":126,"column":13,"nodeType":"221","messageId":"225","endLine":126,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":192,"column":36,"nodeType":"217","messageId":"218","endLine":192,"endColumn":38},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":190,"column":43,"nodeType":"217","messageId":"218","endLine":190,"endColumn":45},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"223","severity":1,"message":"230","line":127,"column":13,"nodeType":"221","messageId":"225","endLine":127,"endColumn":16},{"ruleId":"223","severity":1,"message":"231","line":128,"column":13,"nodeType":"221","messageId":"225","endLine":128,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":194,"column":43,"nodeType":"217","messageId":"218","endLine":194,"endColumn":45},{"ruleId":"223","severity":1,"message":"232","line":3,"column":10,"nodeType":"221","messageId":"225","endLine":3,"endColumn":22},{"ruleId":"223","severity":1,"message":"233","line":5,"column":40,"nodeType":"221","messageId":"225","endLine":5,"endColumn":46},{"ruleId":"223","severity":1,"message":"234","line":5,"column":48,"nodeType":"221","messageId":"225","endLine":5,"endColumn":53},{"ruleId":"223","severity":1,"message":"235","line":8,"column":8,"nodeType":"221","messageId":"225","endLine":8,"endColumn":26},{"ruleId":"223","severity":1,"message":"236","line":9,"column":8,"nodeType":"221","messageId":"225","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"227","line":13,"column":7,"nodeType":"221","messageId":"225","endLine":13,"endColumn":13},{"ruleId":"215","severity":1,"message":"216","line":158,"column":32,"nodeType":"217","messageId":"218","endLine":158,"endColumn":34},{"ruleId":"215","severity":1,"message":"216","line":161,"column":37,"nodeType":"217","messageId":"218","endLine":161,"endColumn":39},{"ruleId":"215","severity":1,"message":"216","line":197,"column":43,"nodeType":"217","messageId":"218","endLine":197,"endColumn":45},{"ruleId":"237","severity":1,"message":"238","line":25,"column":69,"nodeType":"239","messageId":"218","endLine":25,"endColumn":76},{"ruleId":"237","severity":1,"message":"238","line":25,"column":69,"nodeType":"239","messageId":"218","endLine":25,"endColumn":76},"no-native-reassign",["240"],"no-negated-in-lhs",["241"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-use-before-define","'data' was used before it was defined.","Identifier","usedBeforeDefined","no-unused-vars","'FeatureGroup' is defined but never used.","unusedVar","'position' is assigned a value but never used.","'devUrl' is assigned a value but never used.","'prodUrl' is assigned a value but never used.","'CountySelector' is defined but never used.","'lat' is assigned a value but never used.","'lon' is assigned a value but never used.","'MDBDataTable' is defined but never used.","'Marker' is defined but never used.","'Popup' is defined but never used.","'MarkerClusterGroup' is defined but never used.","'Plot' is defined but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","no-global-assign","no-unsafe-negation"]